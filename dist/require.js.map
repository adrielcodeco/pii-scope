{"version":3,"sources":["../src/require.ts"],"names":[],"mappings":"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","file":"require.js","sourcesContent":["/**\n * Copyright 2018-present, CODECO. All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport * as path from 'path'\nimport * as util from 'util'\nconst Module = require('module')\nconst assert = require('assert')\n\nconst debug = util.debuglog('module')\nconst NativeRequire = require\nconst _recursive = Object.create(null)\nconst _extensions = Object.create(null)\n\n// Native extension for .js\n_extensions['.js'] = function (module: any, filename: string) {\n  Reflect.set(\n    module,\n    'exports',\n    NativeRequire('./compile').compile(\n      filename,\n      module,\n      module.noCacheFor,\n      undefined\n    )\n  )\n}\n\n// Native extension for .json\n_extensions['.json'] = Module._extensions['.json']\n\n// Native extension for .node\n_extensions['.node'] = Module._extensions['.node']\n\nfunction updateChildren (parent: any, child: any, scan: any) {\n  const children = parent && parent.children\n  if (children && !(scan && children.includes(child))) children.push(child)\n}\n\nfunction tryModuleLoad (module: any, filename: string) {\n  try {\n    debug('load %j for module %j', filename, module.id)\n    assert(!module.loaded)\n    module.filename = filename\n    module.paths = Module._nodeModulePaths(path.dirname(filename))\n\n    let extension = path.extname(filename) || '.js'\n    if (!_extensions[extension]) extension = '.js'\n    _extensions[extension](module, filename)\n    module.loaded = true\n  } finally {\n    // does nothing\n  }\n}\n\nexport function makeRequireFunction (mod: any) {\n  if (!mod) {\n    throw new Error('the mod argument is invalid')\n  }\n  const ParentModule = mod.constructor\n  const _cache = (mod.context || {})._cache || Module._cache\n  const noCacheFor = mod.noCacheFor || []\n\n  function require (request: string) {\n    try {\n      if (!request) {\n        throw new Error('the path argument is invalid')\n      }\n      let msg = `Recursive module load detected!\\r\\n`\n      msg += `The \"${request}\" module will be loaded, but this is not a best practice\\r\\n`\n      msg += `This could be a mistake, check your code and correct`\n      const filename = Module._resolveFilename(request, mod, false)\n      if (request in _recursive && _recursive[request] === filename) {\n        console.warn(msg)\n        return {}\n      }\n      if (!path.isAbsolute(request) && !noCacheFor.includes(filename)) {\n        const cachedModule = _cache[filename]\n        if (cachedModule) {\n          if (cachedModule.loaded) {\n            updateChildren(mod, cachedModule, true)\n            return cachedModule.exports\n          } else {\n            console.warn(msg)\n            _recursive[request] = filename\n          }\n        }\n      }\n      // if (filename === request) {\n      //   return NativeRequire(request)\n      // }\n      const module = new ParentModule(filename, mod)\n      module.noCacheFor = noCacheFor\n      module.context = mod.context\n      if (!path.isAbsolute(request) && !noCacheFor.includes(filename)) {\n        _cache[filename] = module\n      }\n      tryModuleLoad(module, filename)\n      return Reflect.get(module, 'exports')\n    } finally {\n      // does nothing\n    }\n  }\n\n  function resolve (request: string, options: any) {\n    // tslint:disable-next-line: strict-type-predicates\n    if (typeof request !== 'string') {\n      // throw new ERR_INVALID_ARG_TYPE(\"request\", \"string\", request);\n      throw new Error('The \"request\" argument must be of type \"string\"')\n    }\n    return Module._resolveFilename(request, mod, false, options)\n  }\n\n  function paths (request: string) {\n    // tslint:disable-next-line: strict-type-predicates\n    if (typeof request !== 'string') {\n      // throw new ERR_INVALID_ARG_TYPE(\"request\", \"string\", request);\n      throw new Error('The \"request\" argument must be of type \"string\"')\n    }\n    return Module._resolveLookupPaths(request, mod, true)\n  }\n\n  const requireAny = require as any\n  requireAny['resolve'] = resolve\n  requireAny['paths'] = paths\n  requireAny['main'] = process.mainModule\n  requireAny['extensions'] = _extensions\n  requireAny['cache'] = _cache\n  return require\n}\n"]}