{"version":3,"sources":["compile.js","compile.ts"],"names":["Object","defineProperty","exports","value","fs","require","path","vm","helpers_1","require_1","context_1","NativeModule","_cache","create","compile","filename","mod","noCacheFor","globals","Error","Module","constructor","sandbox","default","console","process","global","context","createContext","func","script","runInContext","runInThisContext","content","readFileSync","stripBOM","stripShebang","wrapper","wrap","Script","lineOffset","displayErrors","_module","paths","_nodeModulePaths","dirname","loaded","customRequire","makeRequireFunction","call","Reflect","set"],"mappings":"AAAA;;AACAA,OAAOC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,SAAO;AAAT,CAA7C;;ACMA,MAAAC,KAAAC,QAAA,IAAA,CAAA;;AACA,MAAAC,OAAAD,QAAA,MAAA,CAAA;;AACA,MAAAE,KAAAF,QAAA,IAAA,CAAA;;AACA,MAAAG,YAAAH,QAAA,WAAA,CAAA;;AACA,MAAAI,YAAAJ,QAAA,WAAA,CAAA;;AACA,MAAAK,YAAAL,QAAA,WAAA,CAAA;;AACA,MAAMM,eAAeN,QAAQ,QAAR,CAArB;;AAEA,MAAMO,SAASZ,OAAOa,MAAP,CAAc,IAAd,CAAf;;AAEA,SAAAC,OAAA,CACEC,QADF,EAEEC,GAFF,EAGEC,UAHF,EAIEC,OAJF,EAIa;AAEX,MAAI,CAACH,QAAL,EAAe;AACb,UAAM,IAAII,KAAJ,CAAU,kCAAV,CAAN;AACD;;AACD,QAAMC,SAASJ,MAAMA,IAAIK,WAAV,GAAwBV,YAAvC;AACA,QAAMW,UAAU,IAAIZ,UAAAa,OAAJ,EAAhB;AACAD,UAAQE,OAAR,GAAkBA,OAAlB;AACAF,UAAQG,OAAR,GAAkBA,OAAlB;AACAH,UAAQI,MAAR,GAAiBR,OAAjB;AACA,QAAMS,UAAUT,UAAUX,GAAGqB,aAAH,CAAiBN,OAAjB,CAAV,GAAsC,CAACN,OAAO,EAAR,EAAYW,OAAlE;AACA,MAAIE,IAAJ;;AACA,MAAId,YAAYH,MAAhB,EAAwB;AACtB,UAAMkB,SAASlB,OAAOG,QAAP,CAAf;AACAc,WAAOF,UAAUG,OAAOC,YAAP,CAAoBJ,OAApB,CAAV,GAAyCG,OAAOE,gBAAP,EAAhD;AACD,GAHD,MAGO;AACL,QAAIC,UAAU7B,GAAG8B,YAAH,CAAgBnB,QAAhB,EAA0B,MAA1B,CAAd;AACAkB,cAAUzB,UAAA2B,QAAA,CAASF,OAAT,CAAV;AACAA,cAAUzB,UAAA4B,YAAA,CAAaH,OAAb,CAAV;AACA,UAAMI,UAAU1B,aAAa2B,IAAb,CAAkBL,OAAlB,CAAhB;AACA,UAAMH,SAAS,IAAIvB,GAAGgC,MAAP,CAAcF,OAAd,EAAuB;AACpCtB,gBAAUA,QAD0B;AAEpCyB,kBAAY,CAFwB;AAGpCC,qBAAe;AAHqB,KAAvB,CAAf;AAKA7B,WAAOG,QAAP,IAAmBe,MAAnB;AACAD,WAAOF,UAAUG,OAAOC,YAAP,CAAoBJ,OAApB,CAAV,GAAyCG,OAAOE,gBAAP,EAAhD;AACD;;AACD,QAAMU,UAAU,IAAItB,MAAJ,CAAWL,QAAX,EAAqBC,GAArB,CAAhB;;AACA0B,UAAQ3B,QAAR,GAAmBA,QAAnB;AACA2B,UAAQC,KAAR,GAAgBhC,aAAaiC,gBAAb,CAA8BtC,KAAKuC,OAAL,CAAa9B,QAAb,CAA9B,CAAhB;AACA2B,UAAQzB,UAAR,GAAqBA,cAAc,EAAnC;AACAyB,UAAQf,OAAR,GAAkBA,OAAlB;AACAe,UAAQI,MAAR,GAAiB,IAAjB;AACA,QAAMC,gBAAgBtC,UAAAuC,mBAAA,CAAoBN,OAApB,CAAtB;AACA,QAAMG,UAAUvC,KAAKuC,OAAL,CAAa9B,QAAb,CAAhB;AACAc,OAAKoB,IAAL,CAAUtB,OAAV,EAAmBe,QAAQxC,OAA3B,EAAoC6C,aAApC,EAAmDL,OAAnD,EAA4D3B,QAA5D,EAAsE8B,OAAtE;AACA,SAAOH,QAAQxC,OAAf;AACD;;AA1CDA,QAAAY,OAAA,GAAAA,OAAA;AA4CAoC,QAAQC,GAAR,CAAYrC,OAAZ,EAAqB,QAArB,EAA+BF,MAA/B","file":"compile.js","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst fs = require(\"fs\");\nconst path = require(\"path\");\nconst vm = require(\"vm\");\nconst helpers_1 = require(\"./helpers\");\nconst require_1 = require(\"./require\");\nconst context_1 = require(\"./context\");\nconst NativeModule = require('module');\nconst _cache = Object.create(null);\nfunction compile(filename, mod, noCacheFor, globals) {\n    if (!filename) {\n        throw new Error('the filename argument is invalid');\n    }\n    const Module = mod ? mod.constructor : NativeModule;\n    const sandbox = new context_1.default();\n    sandbox.console = console;\n    sandbox.process = process;\n    sandbox.global = globals;\n    const context = globals ? vm.createContext(sandbox) : (mod || {}).context;\n    let func;\n    if (filename in _cache) {\n        const script = _cache[filename];\n        func = context ? script.runInContext(context) : script.runInThisContext();\n    }\n    else {\n        let content = fs.readFileSync(filename, 'utf8');\n        content = helpers_1.stripBOM(content);\n        content = helpers_1.stripShebang(content);\n        const wrapper = NativeModule.wrap(content);\n        const script = new vm.Script(wrapper, {\n            filename: filename,\n            lineOffset: 0,\n            displayErrors: true\n        });\n        _cache[filename] = script;\n        func = context ? script.runInContext(context) : script.runInThisContext();\n    }\n    const _module = new Module(filename, mod);\n    _module.filename = filename;\n    _module.paths = NativeModule._nodeModulePaths(path.dirname(filename));\n    _module.noCacheFor = noCacheFor || [];\n    _module.context = context;\n    _module.loaded = true;\n    const customRequire = require_1.makeRequireFunction(_module);\n    const dirname = path.dirname(filename);\n    func.call(context, _module.exports, customRequire, _module, filename, dirname);\n    return _module.exports;\n}\nexports.compile = compile;\nReflect.set(compile, '_cache', _cache);\n","/**\n * Copyright 2018-present, CODECO. All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport * as fs from 'fs'\nimport * as path from 'path'\nimport * as vm from 'vm'\nimport { stripBOM, stripShebang } from './helpers'\nimport { makeRequireFunction } from './require'\nimport Context from './context'\nconst NativeModule = require('module')\n\nconst _cache = Object.create(null)\n\nexport function compile (\n  filename: string,\n  mod: any,\n  noCacheFor: string[],\n  globals: {}\n): any {\n  if (!filename) {\n    throw new Error('the filename argument is invalid')\n  }\n  const Module = mod ? mod.constructor : NativeModule as Function\n  const sandbox = new Context()\n  sandbox.console = console\n  sandbox.process = process\n  sandbox.global = globals\n  const context = globals ? vm.createContext(sandbox) : (mod || {}).context\n  let func\n  if (filename in _cache) {\n    const script = _cache[filename]\n    func = context ? script.runInContext(context) : script.runInThisContext()\n  } else {\n    let content = fs.readFileSync(filename, 'utf8')\n    content = stripBOM(content)\n    content = stripShebang(content)\n    const wrapper = NativeModule.wrap(content)\n    const script = new vm.Script(wrapper, {\n      filename: filename,\n      lineOffset: 0,\n      displayErrors: true\n    })\n    _cache[filename] = script\n    func = context ? script.runInContext(context) : script.runInThisContext()\n  }\n  const _module = new Module(filename, mod)\n  _module.filename = filename\n  _module.paths = NativeModule._nodeModulePaths(path.dirname(filename))\n  _module.noCacheFor = noCacheFor || []\n  _module.context = context\n  _module.loaded = true\n  const customRequire = makeRequireFunction(_module)\n  const dirname = path.dirname(filename)\n  func.call(context, _module.exports, customRequire, _module, filename, dirname)\n  return _module.exports\n}\n\nReflect.set(compile, '_cache', _cache)\n"]}