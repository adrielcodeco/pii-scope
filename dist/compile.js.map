{"version":3,"sources":["../src/compile.ts"],"names":[],"mappings":";;AAOA,yBAAwB;AACxB,6BAA4B;AAC5B,yBAAwB;AACxB,uCAAkD;AAClD,uCAA+C;AAC/C,uCAA+B;AAC/B,MAAM,YAAY,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAA;AAEtC,MAAM,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAA;AAElC,iBACE,QAAgB,EAChB,GAAQ,EACR,UAAoB,EACpB,OAAW;IAEX,IAAI,CAAC,QAAQ,EAAE;QACb,MAAM,IAAI,KAAK,CAAC,kCAAkC,CAAC,CAAA;KACpD;IACD,MAAM,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,CAAC,YAAwB,CAAA;IAC/D,MAAM,OAAO,GAAG,IAAI,iBAAO,EAAE,CAAA;IAC7B,OAAO,CAAC,OAAO,GAAG,OAAO,CAAA;IACzB,OAAO,CAAC,OAAO,GAAG,OAAO,CAAA;IACzB,OAAO,CAAC,MAAM,GAAG,OAAO,CAAA;IACxB,MAAM,OAAO,GAAG,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,EAAE,CAAC,CAAC,OAAO,CAAA;IACzE,IAAI,IAAI,CAAA;IACR,IAAI,QAAQ,IAAI,MAAM,EAAE;QACtB,MAAM,MAAM,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAA;QAC/B,IAAI,GAAG,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,gBAAgB,EAAE,CAAA;KAC1E;SAAM;QACL,IAAI,OAAO,GAAG,EAAE,CAAC,YAAY,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAA;QAC/C,OAAO,GAAG,kBAAQ,CAAC,OAAO,CAAC,CAAA;QAC3B,OAAO,GAAG,sBAAY,CAAC,OAAO,CAAC,CAAA;QAC/B,MAAM,OAAO,GAAG,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;QAC1C,MAAM,MAAM,GAAG,IAAI,EAAE,CAAC,MAAM,CAAC,OAAO,EAAE;YACpC,QAAQ,EAAE,QAAQ;YAClB,UAAU,EAAE,CAAC;YACb,aAAa,EAAE,IAAI;SACpB,CAAC,CAAA;QACF,MAAM,CAAC,QAAQ,CAAC,GAAG,MAAM,CAAA;QACzB,IAAI,GAAG,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,gBAAgB,EAAE,CAAA;KAC1E;IACD,MAAM,OAAO,GAAG,IAAI,MAAM,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAA;IACzC,OAAO,CAAC,QAAQ,GAAG,QAAQ,CAAA;IAC3B,OAAO,CAAC,KAAK,GAAG,YAAY,CAAC,gBAAgB,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAA;IACrE,OAAO,CAAC,UAAU,GAAG,UAAU,IAAI,EAAE,CAAA;IACrC,OAAO,CAAC,OAAO,GAAG,OAAO,CAAA;IACzB,OAAO,CAAC,MAAM,GAAG,IAAI,CAAA;IACrB,MAAM,aAAa,GAAG,6BAAmB,CAAC,OAAO,CAAC,CAAA;IAClD,MAAM,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAA;IACtC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,OAAO,CAAC,OAAO,EAAE,aAAa,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAA;IAC9E,OAAO,OAAO,CAAC,OAAO,CAAA;AACxB,CAAC;AA1CD,0BA0CC;AAED,OAAO,CAAC,GAAG,CAAC,OAAO,EAAE,QAAQ,EAAE,MAAM,CAAC,CAAA","file":"compile.js","sourcesContent":["/**\n * Copyright 2018-present, CODECO. All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport * as fs from 'fs'\nimport * as path from 'path'\nimport * as vm from 'vm'\nimport { stripBOM, stripShebang } from './helpers'\nimport { makeRequireFunction } from './require'\nimport Context from './context'\nconst NativeModule = require('module')\n\nconst _cache = Object.create(null)\n\nexport function compile (\n  filename: string,\n  mod: any,\n  noCacheFor: string[],\n  globals: {}\n): any {\n  if (!filename) {\n    throw new Error('the filename argument is invalid')\n  }\n  const Module = mod ? mod.constructor : NativeModule as Function\n  const sandbox = new Context()\n  sandbox.console = console\n  sandbox.process = process\n  sandbox.global = globals\n  const context = globals ? vm.createContext(sandbox) : (mod || {}).context\n  let func\n  if (filename in _cache) {\n    const script = _cache[filename]\n    func = context ? script.runInContext(context) : script.runInThisContext()\n  } else {\n    let content = fs.readFileSync(filename, 'utf8')\n    content = stripBOM(content)\n    content = stripShebang(content)\n    const wrapper = NativeModule.wrap(content)\n    const script = new vm.Script(wrapper, {\n      filename: filename,\n      lineOffset: 0,\n      displayErrors: true\n    })\n    _cache[filename] = script\n    func = context ? script.runInContext(context) : script.runInThisContext()\n  }\n  const _module = new Module(filename, mod)\n  _module.filename = filename\n  _module.paths = NativeModule._nodeModulePaths(path.dirname(filename))\n  _module.noCacheFor = noCacheFor || []\n  _module.context = context\n  _module.loaded = true\n  const customRequire = makeRequireFunction(_module)\n  const dirname = path.dirname(filename)\n  func.call(context, _module.exports, customRequire, _module, filename, dirname)\n  return _module.exports\n}\n\nReflect.set(compile, '_cache', _cache)\n"]}