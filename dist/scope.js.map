{"version":3,"sources":["../src/scope.ts"],"names":[],"mappings":";;AAOA,+BAAiC;AACjC,uCAAmC;AAQnC,eAA+B,IAAY,EAAE,OAAqB;IAChE,IAAI,CAAC,IAAI,EAAE;QACT,MAAM,IAAI,KAAK,CAAC,8BAA8B,CAAC,CAAA;KAChD;IACD,MAAM,aAAa,GAGf;QACF,UAAU,EAAE,EAAE;QACd,YAAY,EAAE,MAAM;KACrB,CAAA;IACD,IAAI,EAAE,UAAU,EAAE,YAAY,EAAE,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,aAAa,EAAE,OAAO,CAAC,CAAA;IAC5E,IAAI,QAAQ,CAAA;IACZ,IAAI,CAAC,iBAAU,CAAC,IAAI,CAAC,EAAE;QACrB,MAAM,IAAI,KAAK,CAAC,2CAA2C,CAAC,CAAA;KAC7D;SAAM;QACL,QAAQ,GAAG,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAA;KACjC;IACD,UAAU,GAAG,UAAU;SACpB,GAAG,CAAC,CAAC,CAAC,EAAE;QACP,IAAI,iBAAU,CAAC,CAAC,CAAC,EAAE;YACjB,OAAO,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAA;SAC1B;QACD,OAAO,EAAE,CAAA;IACX,CAAC,CAAC;SACD,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAA;IACjB,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE;QAClC,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;KAC1B;IACD,OAAO,iBAAO,CAAC,QAAQ,EAAE,YAAY,EAAE,UAAU,EAAE,EAAE,CAAC,CAAA;AACxD,CAAC;AA9BD,wBA8BC","file":"scope.js","sourcesContent":["/**\n * Copyright 2018-present, CODECO. All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { isAbsolute } from 'path'\nimport { compile } from './compile'\nimport Module from 'module'\n\nexport type ScopeOptions = {\n  noCacheFor?: string[],\n  parentModule?: Module\n}\n\nexport default function Scope (path: string, options: ScopeOptions) {\n  if (!path) {\n    throw new Error('the path argument is invalid')\n  }\n  const defaultParams: {\n    noCacheFor: string[],\n    parentModule: Module\n  } = {\n    noCacheFor: [],\n    parentModule: module\n  }\n  let { noCacheFor, parentModule } = Object.assign({}, defaultParams, options)\n  let filename\n  if (!isAbsolute(path)) {\n    throw new Error('the path argument is not an absolute path')\n  } else {\n    filename = require.resolve(path)\n  }\n  noCacheFor = noCacheFor\n    .map(m => {\n      if (isAbsolute(m)) {\n        return require.resolve(m)\n      }\n      return ''\n    })\n    .filter(i => i)\n  if (!noCacheFor.includes(filename)) {\n    noCacheFor.push(filename)\n  }\n  return compile(filename, parentModule, noCacheFor, {})\n}\n"]}