{"version":3,"sources":["../src/scope.ts"],"names":[],"mappings":";;AAQA,+BAAiC;AACjC,iDAA6C;AAS7C,eAA+B,IAAY,EAAE,OAAqB;IAChE,IAAI,CAAC,IAAI,EAAE;QACT,MAAM,IAAI,KAAK,CAAC,8BAA8B,CAAC,CAAA;KAChD;IACD,MAAM,aAAa,GAIf;QACF,UAAU,EAAE,EAAE;QACd,YAAY,EAAE,MAAM;QACpB,OAAO,EAAE,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC;KAC7B,CAAA;IACD,IAAI,EAAE,UAAU,EAAE,YAAY,EAAE,OAAO,EAAE,GAAG,MAAM,CAAC,MAAM,CACvD,EAAE,EACF,aAAa,EACb,OAAO,CACR,CAAA;IACD,IAAI,CAAC,iBAAU,CAAC,IAAI,CAAC,EAAE;QACrB,MAAM,IAAI,KAAK,CAAC,2CAA2C,CAAC,CAAA;KAC7D;IACD,UAAU,GAAG,UAAU;SACpB,GAAG,CAAC,CAAC,CAAC,EAAE;QACP,IAAI,iBAAU,CAAC,CAAC,CAAC,EAAE;YACjB,OAAO,CAAC,CAAA;SACT;QACD,OAAO,EAAE,CAAA;IACX,CAAC,CAAC;SACD,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAA;IACjB,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE;QAC9B,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;KACtB;IACA,YAAoB,CAAC,UAAU,GAAG,UAAU,CAAA;IAC7C,OAAO,2BAAY,CAAC,IAAI,EAAE,YAAY,EAAE,OAAO,CAAC,CAAA;AAClD,CAAC;AAlCD,wBAkCC","file":"scope.js","sourcesContent":["/**\n * Copyright 2018-present, CODECO. All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\nimport { isAbsolute } from 'path'\nimport { moduleLoader } from './moduleLoader'\nimport Module from 'module'\n\nexport type ScopeOptions = {\n  noCacheFor?: string[]\n  parentModule?: Module\n  globals?: {} | undefined\n}\n\nexport default function Scope (path: string, options: ScopeOptions) {\n  if (!path) {\n    throw new Error('the path argument is invalid')\n  }\n  const defaultParams: {\n    noCacheFor: string[]\n    parentModule: Module\n    globals: {} | undefined\n  } = {\n    noCacheFor: [],\n    parentModule: module,\n    globals: Object.create(null)\n  }\n  let { noCacheFor, parentModule, globals } = Object.assign(\n    {},\n    defaultParams,\n    options\n  )\n  if (!isAbsolute(path)) {\n    throw new Error('the path argument is not an absolute path')\n  }\n  noCacheFor = noCacheFor\n    .map(m => {\n      if (isAbsolute(m)) {\n        return m\n      }\n      return ''\n    })\n    .filter(i => i)\n  if (!noCacheFor.includes(path)) {\n    noCacheFor.push(path)\n  }\n  (parentModule as any).noCacheFor = noCacheFor\n  return moduleLoader(path, parentModule, globals)\n}\n"]}