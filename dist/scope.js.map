{"version":3,"sources":["scope.js","scope.ts"],"names":["Object","defineProperty","exports","value","path_1","require","compile_1","Scope","path","options","Error","defaultParams","noCacheFor","parentModule","module","assign","filename","isAbsolute","resolve","map","m","filter","i","includes","push","compile","default"],"mappings":"AAAA;;AACAA,OAAOC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,SAAO;AAAT,CAA7C;;ACMA,MAAAC,SAAAC,QAAA,MAAA,CAAA;;AACA,MAAAC,YAAAD,QAAA,WAAA,CAAA;;AAQA,SAAAE,KAAA,CAA+BC,IAA/B,EAA6CC,OAA7C,EAAkE;AAChE,MAAI,CAACD,IAAL,EAAW;AACT,UAAM,IAAIE,KAAJ,CAAU,8BAAV,CAAN;AACD;;AACD,QAAMC,gBAGF;AACFC,gBAAY,EADV;AAEFC,kBAAcC;AAFZ,GAHJ;AAOA,MAAI;AAAEF,cAAF;AAAcC;AAAd,MAA+Bb,OAAOe,MAAP,CAAc,EAAd,EAAkBJ,aAAlB,EAAiCF,OAAjC,CAAnC;AACA,MAAIO,QAAJ;;AACA,MAAI,CAACZ,OAAAa,UAAA,CAAWT,IAAX,CAAL,EAAuB;AACrB,UAAM,IAAIE,KAAJ,CAAU,2CAAV,CAAN;AACD,GAFD,MAEO;AACLM,eAAWX,QAAQa,OAAR,CAAgBV,IAAhB,CAAX;AACD;;AACDI,eAAaA,WACVO,GADU,CACNC,KAAI;AACP,QAAIhB,OAAAa,UAAA,CAAWG,CAAX,CAAJ,EAAmB;AACjB,aAAOf,QAAQa,OAAR,CAAgBE,CAAhB,CAAP;AACD;;AACD,WAAO,EAAP;AACD,GANU,EAOVC,MAPU,CAOHC,KAAKA,CAPF,CAAb;;AAQA,MAAI,CAACV,WAAWW,QAAX,CAAoBP,QAApB,CAAL,EAAoC;AAClCJ,eAAWY,IAAX,CAAgBR,QAAhB;AACD;;AACD,SAAOV,UAAAmB,OAAA,CAAQT,QAAR,EAAkBH,YAAlB,EAAgCD,UAAhC,EAA4C,EAA5C,CAAP;AACD;;AA9BDV,QAAAwB,OAAA,GAAAnB,KAAA","file":"scope.js","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst path_1 = require(\"path\");\nconst compile_1 = require(\"./compile\");\nfunction Scope(path, options) {\n    if (!path) {\n        throw new Error('the path argument is invalid');\n    }\n    const defaultParams = {\n        noCacheFor: [],\n        parentModule: module\n    };\n    let { noCacheFor, parentModule } = Object.assign({}, defaultParams, options);\n    let filename;\n    if (!path_1.isAbsolute(path)) {\n        throw new Error('the path argument is not an absolute path');\n    }\n    else {\n        filename = require.resolve(path);\n    }\n    noCacheFor = noCacheFor\n        .map(m => {\n        if (path_1.isAbsolute(m)) {\n            return require.resolve(m);\n        }\n        return '';\n    })\n        .filter(i => i);\n    if (!noCacheFor.includes(filename)) {\n        noCacheFor.push(filename);\n    }\n    return compile_1.compile(filename, parentModule, noCacheFor, {});\n}\nexports.default = Scope;\n","/**\n * Copyright 2018-present, CODECO. All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { isAbsolute } from 'path'\nimport { compile } from './compile'\nimport Module from 'module'\n\nexport type ScopeOptions = {\n  noCacheFor: string[],\n  parentModule: Module\n}\n\nexport default function Scope (path: string, options: ScopeOptions) {\n  if (!path) {\n    throw new Error('the path argument is invalid')\n  }\n  const defaultParams: {\n    noCacheFor: string[],\n    parentModule: Module\n  } = {\n    noCacheFor: [],\n    parentModule: module\n  }\n  let { noCacheFor, parentModule } = Object.assign({}, defaultParams, options)\n  let filename\n  if (!isAbsolute(path)) {\n    throw new Error('the path argument is not an absolute path')\n  } else {\n    filename = require.resolve(path)\n  }\n  noCacheFor = noCacheFor\n    .map(m => {\n      if (isAbsolute(m)) {\n        return require.resolve(m)\n      }\n      return ''\n    })\n    .filter(i => i)\n  if (!noCacheFor.includes(filename)) {\n    noCacheFor.push(filename)\n  }\n  return compile(filename, parentModule, noCacheFor, {})\n}\n"]}