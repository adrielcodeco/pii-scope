{"version":3,"sources":["../src/helpers.ts"],"names":[],"mappings":";;AAOA,MAAM,SAAS,GAAG,EAAE,CAAA;AACpB,MAAM,qBAAqB,GAAG,EAAE,CAAA;AAChC,MAAM,cAAc,GAAG,EAAE,CAAA;AACzB,MAAM,oBAAoB,GAAG,EAAE,CAAA;AAE/B,kBAAmB,OAAe;IAChC,IAAI,OAAO,IAAI,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC,KAAK,MAAM,EAAE;QAC/C,OAAO,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAA;KAC3B;IACD,OAAO,OAAO,CAAA;AAChB,CAAC;AAuCQ,4BAAQ;AArCjB,sBAAuB,OAAe;IACpC,IAAI,CAAC,OAAO,EAAE;QACZ,OAAO,GAAG,EAAE,CAAA;KACb;IAED,MAAM,OAAO,GAAG,OAAO,CAAC,MAAM,CAAA;IAC9B,IAAI,OAAO,IAAI,CAAC,EAAE;QAChB,IACE,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC,KAAK,SAAS;YACnC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC,KAAK,qBAAqB,EAC/C;YACA,IAAI,OAAO,KAAK,CAAC,EAAE;gBAEjB,OAAO,GAAG,EAAE,CAAA;aACb;iBAAM;gBAEL,IAAI,CAAC,GAAG,CAAC,CAAA;gBACT,OAAO,CAAC,GAAG,OAAO,EAAE,EAAE,CAAC,EAAE;oBACvB,MAAM,IAAI,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC,CAAA;oBAClC,IAAI,IAAI,KAAK,cAAc,IAAI,IAAI,KAAK,oBAAoB,EAAE;wBAC5D,MAAK;qBACN;iBACF;gBACD,IAAI,CAAC,KAAK,OAAO,EAAE;oBACjB,OAAO,GAAG,EAAE,CAAA;iBACb;qBAAM;oBAIL,OAAO,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAA;iBAC3B;aACF;SACF;KACF;IACD,OAAO,OAAO,CAAA;AAChB,CAAC;AAEkB,oCAAY","file":"helpers.js","sourcesContent":["/**\n * Copyright 2018-present, CODECO. All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nconst CHAR_HASH = 35 /* # */\nconst CHAR_EXCLAMATION_MARK = 33 /* ! */\nconst CHAR_LINE_FEED = 10 /* \\n */\nconst CHAR_CARRIAGE_RETURN = 13 /* \\r */\n\nfunction stripBOM (content: string) {\n  if (content && content.charCodeAt(0) === 0xfeff) {\n    content = content.slice(1)\n  }\n  return content\n}\n\nfunction stripShebang (content: string) {\n  if (!content) {\n    content = ''\n  }\n  // Remove shebang\n  const contLen = content.length\n  if (contLen >= 2) {\n    if (\n      content.charCodeAt(0) === CHAR_HASH &&\n      content.charCodeAt(1) === CHAR_EXCLAMATION_MARK\n    ) {\n      if (contLen === 2) {\n        // Exact match\n        content = ''\n      } else {\n        // Find end of shebang line and slice it off\n        let i = 2\n        for (; i < contLen; ++i) {\n          const code = content.charCodeAt(i)\n          if (code === CHAR_LINE_FEED || code === CHAR_CARRIAGE_RETURN) {\n            break\n          }\n        }\n        if (i === contLen) {\n          content = ''\n        } else {\n          // Note that this actually includes the newline character(s) in the\n          // new output. This duplicates the behavior of the regular expression\n          // that was previously used to replace the shebang line\n          content = content.slice(i)\n        }\n      }\n    }\n  }\n  return content\n}\n\nexport { stripBOM, stripShebang }\n"]}