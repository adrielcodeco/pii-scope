{"version":3,"sources":["helpers.js","helpers.ts"],"names":["Object","defineProperty","exports","value","CHAR_HASH","CHAR_EXCLAMATION_MARK","CHAR_LINE_FEED","CHAR_CARRIAGE_RETURN","stripBOM","content","charCodeAt","slice","stripShebang","contLen","length","i","code"],"mappings":"AAAA;;AACAA,OAAOC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,SAAO;AAAT,CAA7C;ACMA,MAAMC,YAAY,EAAlB;AACA,MAAMC,wBAAwB,EAA9B;AACA,MAAMC,iBAAiB,EAAvB;AACA,MAAMC,uBAAuB,EAA7B;;AAEA,SAAAC,QAAA,CAAmBC,OAAnB,EAAkC;AAChC,MAAIA,WAAWA,QAAQC,UAAR,CAAmB,CAAnB,MAA0B,MAAzC,EAAiD;AAC/CD,cAAUA,QAAQE,KAAR,CAAc,CAAd,CAAV;AACD;;AACD,SAAOF,OAAP;AACD;;AAuCQP,QAAAM,QAAA,GAAAA,QAAA;;AArCT,SAAAI,YAAA,CAAuBH,OAAvB,EAAsC;AACpC,MAAI,CAACA,OAAL,EAAc;AACZA,cAAU,EAAV;AACD;;AAED,QAAMI,UAAUJ,QAAQK,MAAxB;;AACA,MAAID,WAAW,CAAf,EAAkB;AAChB,QACEJ,QAAQC,UAAR,CAAmB,CAAnB,MAA0BN,SAA1B,IACAK,QAAQC,UAAR,CAAmB,CAAnB,MAA0BL,qBAF5B,EAGE;AACA,UAAIQ,YAAY,CAAhB,EAAmB;AAEjBJ,kBAAU,EAAV;AACD,OAHD,MAGO;AAEL,YAAIM,IAAI,CAAR;;AACA,eAAOA,IAAIF,OAAX,EAAoB,EAAEE,CAAtB,EAAyB;AACvB,gBAAMC,OAAOP,QAAQC,UAAR,CAAmBK,CAAnB,CAAb;;AACA,cAAIC,SAASV,cAAT,IAA2BU,SAAST,oBAAxC,EAA8D;AAC5D;AACD;AACF;;AACD,YAAIQ,MAAMF,OAAV,EAAmB;AACjBJ,oBAAU,EAAV;AACD,SAFD,MAEO;AAILA,oBAAUA,QAAQE,KAAR,CAAcI,CAAd,CAAV;AACD;AACF;AACF;AACF;;AACD,SAAON,OAAP;AACD;;AAEkBP,QAAAU,YAAA,GAAAA,YAAA","file":"helpers.js","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst CHAR_HASH = 35;\nconst CHAR_EXCLAMATION_MARK = 33;\nconst CHAR_LINE_FEED = 10;\nconst CHAR_CARRIAGE_RETURN = 13;\nfunction stripBOM(content) {\n    if (content && content.charCodeAt(0) === 0xfeff) {\n        content = content.slice(1);\n    }\n    return content;\n}\nexports.stripBOM = stripBOM;\nfunction stripShebang(content) {\n    if (!content) {\n        content = '';\n    }\n    const contLen = content.length;\n    if (contLen >= 2) {\n        if (content.charCodeAt(0) === CHAR_HASH &&\n            content.charCodeAt(1) === CHAR_EXCLAMATION_MARK) {\n            if (contLen === 2) {\n                content = '';\n            }\n            else {\n                let i = 2;\n                for (; i < contLen; ++i) {\n                    const code = content.charCodeAt(i);\n                    if (code === CHAR_LINE_FEED || code === CHAR_CARRIAGE_RETURN) {\n                        break;\n                    }\n                }\n                if (i === contLen) {\n                    content = '';\n                }\n                else {\n                    content = content.slice(i);\n                }\n            }\n        }\n    }\n    return content;\n}\nexports.stripShebang = stripShebang;\n","/**\n * Copyright 2018-present, CODECO. All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nconst CHAR_HASH = 35 /* # */\nconst CHAR_EXCLAMATION_MARK = 33 /* ! */\nconst CHAR_LINE_FEED = 10 /* \\n */\nconst CHAR_CARRIAGE_RETURN = 13 /* \\r */\n\nfunction stripBOM (content: string) {\n  if (content && content.charCodeAt(0) === 0xfeff) {\n    content = content.slice(1)\n  }\n  return content\n}\n\nfunction stripShebang (content: string) {\n  if (!content) {\n    content = ''\n  }\n  // Remove shebang\n  const contLen = content.length\n  if (contLen >= 2) {\n    if (\n      content.charCodeAt(0) === CHAR_HASH &&\n      content.charCodeAt(1) === CHAR_EXCLAMATION_MARK\n    ) {\n      if (contLen === 2) {\n        // Exact match\n        content = ''\n      } else {\n        // Find end of shebang line and slice it off\n        let i = 2\n        for (; i < contLen; ++i) {\n          const code = content.charCodeAt(i)\n          if (code === CHAR_LINE_FEED || code === CHAR_CARRIAGE_RETURN) {\n            break\n          }\n        }\n        if (i === contLen) {\n          content = ''\n        } else {\n          // Note that this actually includes the newline character(s) in the\n          // new output. This duplicates the behavior of the regular expression\n          // that was previously used to replace the shebang line\n          content = content.slice(i)\n        }\n      }\n    }\n  }\n  return content\n}\n\nexport { stripBOM, stripShebang }\n"]}